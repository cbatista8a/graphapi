<?php
/**
 * Copyright since 2020 CubaDevOps
 *
 * @Author : Carlos Batista <carlos.batista@cubadevops.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 */

namespace CubaDevOps\GraphApi\Entity;

use CubaDevOps\TheCodingMachine\GraphQLite\Annotations\Field;
use CubaDevOps\TheCodingMachine\GraphQLite\Annotations\Type;

/**
 * @Type
 */
class PaymentOptionEntity
{
    protected string $module_name;
    protected string $action;
    protected string $call_to_action_text;
    protected ?string $form;
    protected ?string $logo;
    protected ?bool $binary;
    protected ?array $inputs;
    protected ?string $additional_information;


    public function __construct(
        $module_name,
        $action,
        $call_to_action_text,
        $form,
        $logo,
        $binary,
        $inputs,
        $additional_information
    ) {
        $this->module_name = $module_name;
        $this->action = $action;
        $this->call_to_action_text = $call_to_action_text;
        $this->form = $form;
        $this->logo = $logo;
        $this->binary = $binary;
        $this->inputs = $inputs;
        $this->additional_information = $additional_information;
    }

    /**
     * @Field
     * @return string
     */
    public function getModuleName(): string
    {
        return $this->module_name;
    }

    /**
     * Was the module form generated by binaries ?
     * @Field
     * @return bool|null
     */
    public function isBinary(): ?bool
    {
        return $this->binary;
    }

    /**
     * The URL to which the request to process the
     * payment must be made.
     * @Field
     * @return string
     */
    public function getAction(): string
    {
        return $this->action;
    }

    /**
     * Custom HTML to display e.g. a form where
     * you write your credit card number.
     * The HTML MUST NOT contain a submit button, as
     * the Core will submit the form.
     * @Field
     * @return string|null
     */
    public function getForm(): ?string
    {
        return $this->form;
    }

    /**
     * An associative array of additional parameters to use when sending
     * the request to $action,
     * e.g. if  $action is 'http://payment-provider.example.com/process',
     *          $method is 'GET'
     *      and $inputs is ['customerName' => 'bob']
     *      then the request will be made to:
     *          'http://payment-provider.example.com/process?customerName=bob'.
     * @Field
     * @return string[]|null
     */
    public function getInputs(): ?array
    {
        return $this->inputs;
    }

    /**
     * @Field
     * @return string|null
     */
    public function getLogo(): ?string
    {
        return $this->logo;
    }

    /**
     * Additional information to display to the customer.
     * This is free HTML, and may be used by modules such as
     * bankwire to display to which account the bank transfer should be made.
     * @Field
     * @return string|null
     */
    public function getAdditionalInformation(): ?string
    {
        return $this->additional_information;
    }

    /**
     * This text will be displayed
     * in the payment option selection widget.
     * @Field
     * @return string
     */
    public function getCallToActionText(): string
    {
        return $this->call_to_action_text;
    }




}